// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/s3-blobstore-backup-restore/incremental"
)

type FakeBackupFinder struct {
	FindStub        func() (incremental.BackupDirectory, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct{}
	findReturns     struct {
		result1 incremental.BackupDirectory
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 incremental.BackupDirectory
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBackupFinder) Find() (incremental.BackupDirectory, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct{}{})
	fake.recordInvocation("Find", []interface{}{})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReturns.result1, fake.findReturns.result2
}

func (fake *FakeBackupFinder) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeBackupFinder) FindReturns(result1 incremental.BackupDirectory, result2 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 incremental.BackupDirectory
		result2 error
	}{result1, result2}
}

func (fake *FakeBackupFinder) FindReturnsOnCall(i int, result1 incremental.BackupDirectory, result2 error) {
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 incremental.BackupDirectory
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 incremental.BackupDirectory
		result2 error
	}{result1, result2}
}

func (fake *FakeBackupFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBackupFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ incremental.BackupFinder = new(FakeBackupFinder)
