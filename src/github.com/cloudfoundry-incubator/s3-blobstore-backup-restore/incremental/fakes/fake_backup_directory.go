// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/s3-blobstore-backup-restore/incremental"
)

type FakeBackupDirectory struct {
	PathStub        func() string
	pathMutex       sync.RWMutex
	pathArgsForCall []struct{}
	pathReturns     struct {
		result1 string
	}
	pathReturnsOnCall map[int]struct {
		result1 string
	}
	IsCompleteStub        func() (bool, error)
	isCompleteMutex       sync.RWMutex
	isCompleteArgsForCall []struct{}
	isCompleteReturns     struct {
		result1 bool
		result2 error
	}
	isCompleteReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	MarkCompleteStub        func() error
	markCompleteMutex       sync.RWMutex
	markCompleteArgsForCall []struct{}
	markCompleteReturns     struct {
		result1 error
	}
	markCompleteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBackupDirectory) Path() string {
	fake.pathMutex.Lock()
	ret, specificReturn := fake.pathReturnsOnCall[len(fake.pathArgsForCall)]
	fake.pathArgsForCall = append(fake.pathArgsForCall, struct{}{})
	fake.recordInvocation("Path", []interface{}{})
	fake.pathMutex.Unlock()
	if fake.PathStub != nil {
		return fake.PathStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pathReturns.result1
}

func (fake *FakeBackupDirectory) PathCallCount() int {
	fake.pathMutex.RLock()
	defer fake.pathMutex.RUnlock()
	return len(fake.pathArgsForCall)
}

func (fake *FakeBackupDirectory) PathReturns(result1 string) {
	fake.PathStub = nil
	fake.pathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBackupDirectory) PathReturnsOnCall(i int, result1 string) {
	fake.PathStub = nil
	if fake.pathReturnsOnCall == nil {
		fake.pathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.pathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBackupDirectory) IsComplete() (bool, error) {
	fake.isCompleteMutex.Lock()
	ret, specificReturn := fake.isCompleteReturnsOnCall[len(fake.isCompleteArgsForCall)]
	fake.isCompleteArgsForCall = append(fake.isCompleteArgsForCall, struct{}{})
	fake.recordInvocation("IsComplete", []interface{}{})
	fake.isCompleteMutex.Unlock()
	if fake.IsCompleteStub != nil {
		return fake.IsCompleteStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isCompleteReturns.result1, fake.isCompleteReturns.result2
}

func (fake *FakeBackupDirectory) IsCompleteCallCount() int {
	fake.isCompleteMutex.RLock()
	defer fake.isCompleteMutex.RUnlock()
	return len(fake.isCompleteArgsForCall)
}

func (fake *FakeBackupDirectory) IsCompleteReturns(result1 bool, result2 error) {
	fake.IsCompleteStub = nil
	fake.isCompleteReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBackupDirectory) IsCompleteReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsCompleteStub = nil
	if fake.isCompleteReturnsOnCall == nil {
		fake.isCompleteReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isCompleteReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBackupDirectory) MarkComplete() error {
	fake.markCompleteMutex.Lock()
	ret, specificReturn := fake.markCompleteReturnsOnCall[len(fake.markCompleteArgsForCall)]
	fake.markCompleteArgsForCall = append(fake.markCompleteArgsForCall, struct{}{})
	fake.recordInvocation("MarkComplete", []interface{}{})
	fake.markCompleteMutex.Unlock()
	if fake.MarkCompleteStub != nil {
		return fake.MarkCompleteStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.markCompleteReturns.result1
}

func (fake *FakeBackupDirectory) MarkCompleteCallCount() int {
	fake.markCompleteMutex.RLock()
	defer fake.markCompleteMutex.RUnlock()
	return len(fake.markCompleteArgsForCall)
}

func (fake *FakeBackupDirectory) MarkCompleteReturns(result1 error) {
	fake.MarkCompleteStub = nil
	fake.markCompleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackupDirectory) MarkCompleteReturnsOnCall(i int, result1 error) {
	fake.MarkCompleteStub = nil
	if fake.markCompleteReturnsOnCall == nil {
		fake.markCompleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.markCompleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackupDirectory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pathMutex.RLock()
	defer fake.pathMutex.RUnlock()
	fake.isCompleteMutex.RLock()
	defer fake.isCompleteMutex.RUnlock()
	fake.markCompleteMutex.RLock()
	defer fake.markCompleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBackupDirectory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ incremental.BackupDirectory = new(FakeBackupDirectory)
