// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	gcs "github.com/cloudfoundry-incubator/gcs-blobstore-backup-restore"
)

type FakeBucket struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	ListBlobsStub        func(prefix string) ([]gcs.Blob, error)
	listBlobsMutex       sync.RWMutex
	listBlobsArgsForCall []struct {
		prefix string
	}
	listBlobsReturns struct {
		result1 []gcs.Blob
		result2 error
	}
	listBlobsReturnsOnCall map[int]struct {
		result1 []gcs.Blob
		result2 error
	}
	CopyBlobToBucketStub        func(bucket gcs.Bucket, src string, dst string) error
	copyBlobToBucketMutex       sync.RWMutex
	copyBlobToBucketArgsForCall []struct {
		bucket gcs.Bucket
		src    string
		dst    string
	}
	copyBlobToBucketReturns struct {
		result1 error
	}
	copyBlobToBucketReturnsOnCall map[int]struct {
		result1 error
	}
	CopyBlobsToBucketStub        func(bucket gcs.Bucket, src string) error
	copyBlobsToBucketMutex       sync.RWMutex
	copyBlobsToBucketArgsForCall []struct {
		bucket gcs.Bucket
		src    string
	}
	copyBlobsToBucketReturns struct {
		result1 error
	}
	copyBlobsToBucketReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteBlobStub        func(name string) error
	deleteBlobMutex       sync.RWMutex
	deleteBlobArgsForCall []struct {
		name string
	}
	deleteBlobReturns struct {
		result1 error
	}
	deleteBlobReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBucket) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeBucket) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeBucket) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBucket) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBucket) ListBlobs(prefix string) ([]gcs.Blob, error) {
	fake.listBlobsMutex.Lock()
	ret, specificReturn := fake.listBlobsReturnsOnCall[len(fake.listBlobsArgsForCall)]
	fake.listBlobsArgsForCall = append(fake.listBlobsArgsForCall, struct {
		prefix string
	}{prefix})
	fake.recordInvocation("ListBlobs", []interface{}{prefix})
	fake.listBlobsMutex.Unlock()
	if fake.ListBlobsStub != nil {
		return fake.ListBlobsStub(prefix)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listBlobsReturns.result1, fake.listBlobsReturns.result2
}

func (fake *FakeBucket) ListBlobsCallCount() int {
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	return len(fake.listBlobsArgsForCall)
}

func (fake *FakeBucket) ListBlobsArgsForCall(i int) string {
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	return fake.listBlobsArgsForCall[i].prefix
}

func (fake *FakeBucket) ListBlobsReturns(result1 []gcs.Blob, result2 error) {
	fake.ListBlobsStub = nil
	fake.listBlobsReturns = struct {
		result1 []gcs.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) ListBlobsReturnsOnCall(i int, result1 []gcs.Blob, result2 error) {
	fake.ListBlobsStub = nil
	if fake.listBlobsReturnsOnCall == nil {
		fake.listBlobsReturnsOnCall = make(map[int]struct {
			result1 []gcs.Blob
			result2 error
		})
	}
	fake.listBlobsReturnsOnCall[i] = struct {
		result1 []gcs.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) CopyBlobToBucket(bucket gcs.Bucket, src string, dst string) error {
	fake.copyBlobToBucketMutex.Lock()
	ret, specificReturn := fake.copyBlobToBucketReturnsOnCall[len(fake.copyBlobToBucketArgsForCall)]
	fake.copyBlobToBucketArgsForCall = append(fake.copyBlobToBucketArgsForCall, struct {
		bucket gcs.Bucket
		src    string
		dst    string
	}{bucket, src, dst})
	fake.recordInvocation("CopyBlobToBucket", []interface{}{bucket, src, dst})
	fake.copyBlobToBucketMutex.Unlock()
	if fake.CopyBlobToBucketStub != nil {
		return fake.CopyBlobToBucketStub(bucket, src, dst)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.copyBlobToBucketReturns.result1
}

func (fake *FakeBucket) CopyBlobToBucketCallCount() int {
	fake.copyBlobToBucketMutex.RLock()
	defer fake.copyBlobToBucketMutex.RUnlock()
	return len(fake.copyBlobToBucketArgsForCall)
}

func (fake *FakeBucket) CopyBlobToBucketArgsForCall(i int) (gcs.Bucket, string, string) {
	fake.copyBlobToBucketMutex.RLock()
	defer fake.copyBlobToBucketMutex.RUnlock()
	return fake.copyBlobToBucketArgsForCall[i].bucket, fake.copyBlobToBucketArgsForCall[i].src, fake.copyBlobToBucketArgsForCall[i].dst
}

func (fake *FakeBucket) CopyBlobToBucketReturns(result1 error) {
	fake.CopyBlobToBucketStub = nil
	fake.copyBlobToBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) CopyBlobToBucketReturnsOnCall(i int, result1 error) {
	fake.CopyBlobToBucketStub = nil
	if fake.copyBlobToBucketReturnsOnCall == nil {
		fake.copyBlobToBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyBlobToBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) CopyBlobsToBucket(bucket gcs.Bucket, src string) error {
	fake.copyBlobsToBucketMutex.Lock()
	ret, specificReturn := fake.copyBlobsToBucketReturnsOnCall[len(fake.copyBlobsToBucketArgsForCall)]
	fake.copyBlobsToBucketArgsForCall = append(fake.copyBlobsToBucketArgsForCall, struct {
		bucket gcs.Bucket
		src    string
	}{bucket, src})
	fake.recordInvocation("CopyBlobsToBucket", []interface{}{bucket, src})
	fake.copyBlobsToBucketMutex.Unlock()
	if fake.CopyBlobsToBucketStub != nil {
		return fake.CopyBlobsToBucketStub(bucket, src)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.copyBlobsToBucketReturns.result1
}

func (fake *FakeBucket) CopyBlobsToBucketCallCount() int {
	fake.copyBlobsToBucketMutex.RLock()
	defer fake.copyBlobsToBucketMutex.RUnlock()
	return len(fake.copyBlobsToBucketArgsForCall)
}

func (fake *FakeBucket) CopyBlobsToBucketArgsForCall(i int) (gcs.Bucket, string) {
	fake.copyBlobsToBucketMutex.RLock()
	defer fake.copyBlobsToBucketMutex.RUnlock()
	return fake.copyBlobsToBucketArgsForCall[i].bucket, fake.copyBlobsToBucketArgsForCall[i].src
}

func (fake *FakeBucket) CopyBlobsToBucketReturns(result1 error) {
	fake.CopyBlobsToBucketStub = nil
	fake.copyBlobsToBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) CopyBlobsToBucketReturnsOnCall(i int, result1 error) {
	fake.CopyBlobsToBucketStub = nil
	if fake.copyBlobsToBucketReturnsOnCall == nil {
		fake.copyBlobsToBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyBlobsToBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) DeleteBlob(name string) error {
	fake.deleteBlobMutex.Lock()
	ret, specificReturn := fake.deleteBlobReturnsOnCall[len(fake.deleteBlobArgsForCall)]
	fake.deleteBlobArgsForCall = append(fake.deleteBlobArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("DeleteBlob", []interface{}{name})
	fake.deleteBlobMutex.Unlock()
	if fake.DeleteBlobStub != nil {
		return fake.DeleteBlobStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteBlobReturns.result1
}

func (fake *FakeBucket) DeleteBlobCallCount() int {
	fake.deleteBlobMutex.RLock()
	defer fake.deleteBlobMutex.RUnlock()
	return len(fake.deleteBlobArgsForCall)
}

func (fake *FakeBucket) DeleteBlobArgsForCall(i int) string {
	fake.deleteBlobMutex.RLock()
	defer fake.deleteBlobMutex.RUnlock()
	return fake.deleteBlobArgsForCall[i].name
}

func (fake *FakeBucket) DeleteBlobReturns(result1 error) {
	fake.DeleteBlobStub = nil
	fake.deleteBlobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) DeleteBlobReturnsOnCall(i int, result1 error) {
	fake.DeleteBlobStub = nil
	if fake.deleteBlobReturnsOnCall == nil {
		fake.deleteBlobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBlobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	fake.copyBlobToBucketMutex.RLock()
	defer fake.copyBlobToBucketMutex.RUnlock()
	fake.copyBlobsToBucketMutex.RLock()
	defer fake.copyBlobsToBucketMutex.RUnlock()
	fake.deleteBlobMutex.RLock()
	defer fake.deleteBlobMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBucket) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gcs.Bucket = new(FakeBucket)
